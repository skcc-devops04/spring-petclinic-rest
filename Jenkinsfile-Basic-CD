pipeline {
  agent {
    kubernetes {
      label 'petclinic-cd'
      yamlFile 'jenkins-agent-pod.yaml'
    }
  }

  environment {
    REGISTRY_URL = '3.37.58.236:8000'
    REGISTRY_CREDENTIALS = 'harbor-docker-registry'
    APP_IMAGE = null
    IMAGE_REPO = 'repo-spring-petclinic-rest'
    IMAGE_NAME = 'spring-petclinic-rest'
    IMAGE_TAG = sh(returnStdout: true, script: '(git rev-parse --short HEAD && echo "_$BUILD_NUMBER") | tr -d "\n"').trim()
    APP_URL = 'a0c861d17c59b414c8f5302355144b84-d01559613ddf2c4c.elb.ap-northeast-2.amazonaws.com'
    APP_PORT = 80
  }

  stages {
    stage('Package') {
      steps {
        container('maven') {
          sh 'mvn package -DskipTests'
          archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
        }
      }
    }
    
    stage('Build Docker image') {
      steps {
        container('docker') {
          script {
            APP_IMAGE = docker.build("${IMAGE_REPO}/${IMAGE_NAME}:${IMAGE_TAG}")
          }
        }
      }
    }

    stage('Push Docker image') {
      steps {
        container('docker') {
          script {
            docker.withRegistry('http://' + REGISTRY_URL, REGISTRY_CREDENTIALS) {
              APP_IMAGE.push()
              APP_IMAGE.push('latest')
            }
          }
        }
      }
    }

    stage('Update manifest') {
      steps {
        sh """
           git config --global user.name 'skcc-devops04'
           git config --global user.email 'skcc.devops04@sk.com'
           git config --global credential.helper cache
           git config --global push.default simple
           """
        git url: 'https://github.com/skcc-devops04/petclinic-argocd-helm.git',
            credentialsId: 'skcc.devops04',
            branch: 'main'
        sh """
           sed -i 's/tag:.*/tag: ${IMAGE_TAG}/g' values.yaml
           git add values.yaml
           git commit -m 'Update Docker image tag: ${IMAGE_TAG}'
           git push origin main
           """
      }
    }
//newman run ${WORKSPACE}/api_test.json \
    stage('API Test') {
      steps {
        container('newman') {
          git url: 'https://github.com/skcc-devops04/spring-petclinic-rest.git', credentialsId: 'skcc.devops04', branch: 'main'
          sh """
            newman run https://www.getpostman.com/collections/d0e925037b1816d118dc \
                  --env-var 'host_url=${APP_URL}/petclinic' --env-var 'port=${APP_PORT}' \
                  --reporters cli,junit \
                  --reporter-junit-export 'target/newman/petclinic-report.xml'
          """
        }
      }
      post {
        always {
          junit 'allowEmptyResults: true, testResults: "target/newman/*.xml"'
        }
      }
    }

//    stage( 'Deploy to Cluster' ) {
//      steps {
//        script {
//          kubernetesDeploy(kubeconfigId: 'kubeconfig-sa-token', configs: 'petclinic-app.yaml')
//        }
//        sh 'sleep 10'
//        /*container('kubectl') {
//          sh 'sleep 10'
//          sh 'kubectl wait --for=condition=available --timeout=60s deployments -l app=petclinic'
//          sh 'kubectl wait --for=condition=ready --timeout=60s pods -l app=hello-world'
//        }*/
//      }

  }
}
